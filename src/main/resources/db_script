/*==============================================================
   DATABASE: CB_DB (PostgreSQL Version)
   Description: Schema initialization and seed data
===============================================================*/

-- ==============================
-- 1. MASTER REFERENCE TABLES
-- ==============================

CREATE TABLE TBL_PRODUCT_SHT_CODE (
    PRODUCT VARCHAR(50) NOT NULL,
    PRD_SHT_CD VARCHAR(3) NOT NULL,
    CONSTRAINT PK_TBL_PRODUCT_SHT_CODE PRIMARY KEY (PRD_SHT_CD)
);

INSERT INTO TBL_PRODUCT_SHT_CODE (PRODUCT, PRD_SHT_CD)
VALUES
    ('LEGACY', 'LEG'),
    ('LAUNCH', 'LAU'),
    ('PLUS', 'PLU'),
    ('GOLD', 'GOL'),
    ('PARTIAL', 'PAR'),
    ('UNSECURED', 'UNS');


CREATE TABLE TBL_FEE_TYPE_SHT_CODE (
    FEE_TYPE VARCHAR(50) NOT NULL,
    FEE_TYPE_SHT_CD VARCHAR(2) NOT NULL,
    CONSTRAINT PK_TBL_FEE_TYPE_SHT_CODE PRIMARY KEY (FEE_TYPE_SHT_CD)
);

INSERT INTO TBL_FEE_TYPE_SHT_CODE (FEE_TYPE, FEE_TYPE_SHT_CD)
VALUES
    ('ANNUAL', 'AF'),
    ('MONTHLY', 'MF'),
    ('NO', 'NF');


CREATE TABLE TBL_REWARDS_TYPE_SHT_CODE (
    REWARDS_TYPE VARCHAR(50) NOT NULL,
    REWARDS_TYPE_SHT_CD VARCHAR(2) NOT NULL,
    CONSTRAINT PK_TBL_REWARDS_TYPE_SHT_CODE PRIMARY KEY (REWARDS_TYPE_SHT_CD)
);

INSERT INTO TBL_REWARDS_TYPE_SHT_CODE (REWARDS_TYPE, REWARDS_TYPE_SHT_CD)
VALUES
    ('PARTNER', 'PR'),
    ('CASH BACK', 'CB'),
    ('TRAVEL', 'TR'),
    ('POINTS', 'PT');


-- ==============================
-- 2. AUDIT TABLE
-- ==============================

CREATE TABLE TBL_AUDIT (
    AUDIT_ID SERIAL PRIMARY KEY,
    USERNAME VARCHAR(255),
    ACTION VARCHAR(255),
    UPDATED_TIME TIMESTAMP,
    NOTE VARCHAR(500)
);


CREATE TABLE TBL_PRIN_CODE (
    PRIN_CODE VARCHAR(50) PRIMARY KEY,
    DESCRIPTION VARCHAR(255),
    STATUS VARCHAR(50)
);

INSERT INTO TBL_PRIN_CODE (PRIN_CODE, DESCRIPTION, STATUS)
VALUES
    ('PRIN001', 'Primary', 'Active'),
    ('PRIN002', 'Secondary', 'Active'),
    ('PRIN003', 'Tertiary', 'Pending'),
    ('PRIN004', 'Backup', 'Active'),
    ('PRIN005', 'Emergency', 'Inactive'),
    ('PRIN006', 'Testing', 'Draft');


CREATE TABLE TBL_CWS_PROD_CODE (
    CWS_PROD_CODE VARCHAR(50) PRIMARY KEY,
    DESCRIPTION VARCHAR(255),
    STATUS VARCHAR(50)
);

INSERT INTO TBL_CWS_PROD_CODE (CWS_PROD_CODE, DESCRIPTION, STATUS)
VALUES
    ('CWS-001', 'Auth Service', 'Active'),
    ('CWS-002', 'Payment Service', 'Active'),
    ('CWS-003', 'Notification Service', 'Active'),
    ('CWS-004', 'Analytics Service', 'Pending'),
    ('CWS-005', 'Reporting Service', 'Active'),
    ('CWS-006', 'Integration Service', 'Draft');


CREATE TABLE TBL_CHA_CODE (
    CHA_CODE VARCHAR(50) PRIMARY KEY,
    DESCRIPTION VARCHAR(255),
    STATUS VARCHAR(50)
);

INSERT INTO TBL_CHA_CODE (CHA_CODE, DESCRIPTION, STATUS)
VALUES
    ('CHA-WEB', 'Web Portal', 'Active'),
    ('CHA-MOB', 'Mobile App', 'Active'),
    ('CHA-ATM', 'ATM Network', 'Active'),
    ('CHA-API', 'API Gateway', 'Pending'),
    ('CHA-POS', 'Point of Sale', 'Active'),
    ('CHA-CALL', 'Call Center', 'Inactive');



-- ==============================
-- 3. PRODUCT TABLE
-- ==============================

CREATE TABLE TBL_PRODUCT (
    PRODUCT_ID VARCHAR(50) PRIMARY KEY,
    PRODUCT_SHT_CD VARCHAR(3) NOT NULL,
    FEE_TYPE_SHT_CD VARCHAR(2) NOT NULL,
    REWARDS_TYPE_SHT_CD VARCHAR(2) NOT NULL,
    APR_TYPE VARCHAR(50),
    PURCHASE_APR_MIN NUMERIC(5,2),
    PURCHASE_APR_MAX NUMERIC(5,2),
    CASH_APR_MIN NUMERIC(5,2),
    CASH_APR_MAX NUMERIC(5,2),
    CREDIT_LINE_MIN INT,
    CREDIT_LINE_MAX INT,
    SECURITY_DEPOSIT_INDICATOR VARCHAR(1),
    DEPOSIT_MIN INT,
    DEPOSIT_MAX INT,
    TERMS_CONDITIONS VARCHAR(5000),
    CARDHOLDER_AGREEMENT VARCHAR(5000),
    CARD_IMAGE VARCHAR(500),
    STATUS VARCHAR(50),
    CREATED_BY VARCHAR(255),
    CREATED_DATETIME TIMESTAMP,
    REVIEWED_BY VARCHAR(255),
    REVIEWED_DATETIME TIMESTAMP,
    OVERRIDE_BY VARCHAR(100),
    OVERRIDE_DATETIME TIMESTAMP,
    OVERRIDE_JUSTIFICATION BYTEA,
    REVIEW_COMMENTS VARCHAR(1000),
    PRIN VARCHAR(50),
    CWS_PRODUCT_ID VARCHAR(50),
    CHA_CODE VARCHAR(50),
    BOARDING_INDICATOR TEXT[],
    START_DATE TIMESTAMP,
    END_DATE TIMESTAMP,
    CONSTRAINT FK_PRODUCT_SHT FOREIGN KEY (PRODUCT_SHT_CD) REFERENCES TBL_PRODUCT_SHT_CODE(PRD_SHT_CD),
    CONSTRAINT FK_FEE_TYPE_SHT FOREIGN KEY (FEE_TYPE_SHT_CD) REFERENCES TBL_FEE_TYPE_SHT_CODE(FEE_TYPE_SHT_CD),
    CONSTRAINT FK_REWARDS_TYPE_SHT FOREIGN KEY (REWARDS_TYPE_SHT_CD) REFERENCES TBL_REWARDS_TYPE_SHT_CODE(REWARDS_TYPE_SHT_CD),
    CONSTRAINT FK_PRIN FOREIGN KEY (PRIN) REFERENCES TBL_PRIN_CODE(PRIN_CODE),
    CONSTRAINT FK_CWS FOREIGN KEY (CWS_PRODUCT_ID) REFERENCES TBL_CWS_PROD_CODE(CWS_PROD_CODE),
    CONSTRAINT FK_CHA FOREIGN KEY (CHA_CODE) REFERENCES TBL_CHA_CODE(CHA_CODE),
    CONSTRAINT CK_PURCHASE_APR_MIN CHECK (PURCHASE_APR_MIN BETWEEN 0 AND 99.99),
    CONSTRAINT CK_PURCHASE_APR_MAX CHECK (PURCHASE_APR_MAX BETWEEN 0 AND 99.99)
);


-- ==============================
-- 4. RANDOM DATA GENERATION
-- ==============================

DO $$
DECLARE
    i INT := 1;
    prd CHAR(3);
    fee CHAR(2);
    rew CHAR(2);
    pid VARCHAR(50);
    pmin NUMERIC(5,2);
    pmax NUMERIC(5,2);
    prin VARCHAR(50);
    cws VARCHAR(50);
    cha VARCHAR(50);
    apr_type_val VARCHAR(50);
    sec_deposit_ind VARCHAR(1);
    random_flags TEXT[];
    credit_min INT;
    credit_max INT;
BEGIN
    WHILE i <= 50 LOOP
        SELECT PRD_SHT_CD INTO prd FROM TBL_PRODUCT_SHT_CODE ORDER BY RANDOM() LIMIT 1;
        SELECT FEE_TYPE_SHT_CD INTO fee FROM TBL_FEE_TYPE_SHT_CODE ORDER BY RANDOM() LIMIT 1;
        SELECT REWARDS_TYPE_SHT_CD INTO rew FROM TBL_REWARDS_TYPE_SHT_CODE ORDER BY RANDOM() LIMIT 1;
        SELECT PRIN_CODE INTO prin FROM TBL_PRIN_CODE ORDER BY RANDOM() LIMIT 1;
        SELECT CWS_PROD_CODE INTO cws FROM TBL_CWS_PROD_CODE ORDER BY RANDOM() LIMIT 1;
        SELECT CHA_CODE INTO cha FROM TBL_CHA_CODE ORDER BY RANDOM() LIMIT 1;

        pid := prd || '-' || fee || '-' || rew || '-' || LPAD(i::TEXT, 7, '0');

        -- Randomly assign APR_TYPE as FIXED or VARIABLE
        IF RANDOM() < 0.5 THEN
            apr_type_val := 'FIXED';
        ELSE
            apr_type_val := 'VARIABLE';
        END IF;

        -- Generate APR values
        pmin := ROUND(((RANDOM() * 20) + 5)::numeric, 2);

        -- For FIXED, min = max; for VARIABLE, max > min
        IF apr_type_val = 'FIXED' THEN
            pmax := pmin;
        ELSE
            pmax := pmin + ROUND(((RANDOM() * 10) + 5)::numeric, 2);
        END IF;

        -- Generate Credit Line Min and Max (ALWAYS populated, independent of security deposit)
        credit_min := (FLOOR(RANDOM() * 10) + 3) * 100; -- Random: 300, 400, 500...1200
        credit_max := credit_min + (FLOOR(RANDOM() * 50) + 20) * 100; -- credit_max > credit_min

        -- Randomly set security deposit indicator
        IF RANDOM() < 0.6 THEN
            sec_deposit_ind := 'Y';
        ELSE
            sec_deposit_ind := 'N';
        END IF;

        -- Generate random boarding indicators (flags)
        random_flags := ARRAY[]::TEXT[];
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG1'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG2'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG3'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG4'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG5'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG6'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG7'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG8'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG9'); END IF;
        IF RANDOM() < 0.3 THEN random_flags := array_append(random_flags, 'PC_FLAG10'); END IF;
        IF RANDOM() < 0.4 THEN random_flags := array_append(random_flags, 'UPC'); END IF;

        INSERT INTO TBL_PRODUCT (
            PRODUCT_ID, PRODUCT_SHT_CD, FEE_TYPE_SHT_CD, REWARDS_TYPE_SHT_CD,
            APR_TYPE, PURCHASE_APR_MIN, PURCHASE_APR_MAX,
            CASH_APR_MIN, CASH_APR_MAX,
            CREDIT_LINE_MIN, CREDIT_LINE_MAX,
            SECURITY_DEPOSIT_INDICATOR, DEPOSIT_MIN, DEPOSIT_MAX,
            TERMS_CONDITIONS, CARDHOLDER_AGREEMENT, CARD_IMAGE,
            STATUS, CREATED_BY, CREATED_DATETIME, REVIEWED_BY, REVIEWED_DATETIME,
            OVERRIDE_BY, OVERRIDE_DATETIME, OVERRIDE_JUSTIFICATION, REVIEW_COMMENTS,
            PRIN, CWS_PRODUCT_ID, CHA_CODE, BOARDING_INDICATOR, START_DATE, END_DATE
        )
        VALUES (
            pid, prd, fee, rew,
            apr_type_val, pmin, pmax,
            pmin * 1.05, pmax * 1.05,
            credit_min, credit_max,  -- ✅ ALWAYS POPULATED
            sec_deposit_ind,
            CASE WHEN sec_deposit_ind = 'Y' THEN 200 ELSE NULL END,  -- ✅ Only deposit min/max depend on indicator
            CASE WHEN sec_deposit_ind = 'Y' THEN 5000 ELSE NULL END,
            'https://example.com/terms/' || pid,
            'https://example.com/agreement/' || pid,
            'https://example.com/card-image/' || pid,
            'ACTIVE', 'SYSTEM', NOW(), 'REVIEWER', NOW(),
            NULL, NULL, NULL, 'Product created automatically',
            prin, cws, cha, random_flags,
            NOW(), NOW() + INTERVAL '1 year'
        );

        i := i + 1;
    END LOOP;
END$$;


-- ==============================
-- 5. POST-INSERT UPDATES
-- ==============================

UPDATE TBL_PRODUCT
SET PURCHASE_APR_MIN = CASE
    WHEN PURCHASE_APR_MIN < 5 THEN 5
    WHEN PURCHASE_APR_MIN > 50 THEN 50
    ELSE PURCHASE_APR_MIN
END;

UPDATE TBL_PRODUCT
SET PURCHASE_APR_MAX = CASE
    WHEN PURCHASE_APR_MAX < 5 THEN 5
    WHEN PURCHASE_APR_MAX > 50 THEN 50
    ELSE PURCHASE_APR_MAX
END;

UPDATE TBL_PRODUCT
SET CASH_APR_MIN = PURCHASE_APR_MIN * 1.05;

UPDATE TBL_PRODUCT
SET CASH_APR_MAX = PURCHASE_APR_MAX * 1.05;